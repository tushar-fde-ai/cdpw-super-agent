'use client';

import { motion, AnimatePresence } from 'framer-motion';
import {
  X,
  Edit,
  Clock,
  Mail,
  MessageSquare,
  GitBranch,
  TestTube,
  Sparkles,
  Check,
  AlertCircle,
  Flag
} from 'lucide-react';
import { StepDetailsDrawerProps, EmailConfig, SMSConfig, WaitConfig, DecisionConfig, EntryConfig } from './types';

export default function StepDetailsDrawer({
  node,
  isOpen,
  onClose,
  onEdit
}: StepDetailsDrawerProps) {
  if (!node) return null;

  const getNodeIcon = () => {
    switch (node.type) {
      case 'entry': return Flag;
      case 'email': return Mail;
      case 'sms': return MessageSquare;
      case 'wait': return Clock;
      case 'decision': return GitBranch;
      default: return Check;
    }
  };

  const IconComponent = getNodeIcon();

  const renderEmailConfig = (config: EmailConfig) => (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Subject Line</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm text-gray-900">{config.subjectLine}</p>
        </div>
      </div>

      {config.subjectLineVariants && config.subjectLineVariants.length > 1 && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">A/B Test Variants</label>
          <div className="space-y-2">
            {config.subjectLineVariants.map((variant, index) => (
              <div key={index} className="bg-orange-50 rounded-md p-3 border border-orange-200">
                <div className="flex items-center space-x-2">
                  <span className="text-xs font-medium text-orange-700 bg-orange-200 px-2 py-1 rounded">
                    Variant {String.fromCharCode(65 + index)}
                  </span>
                  <p className="text-sm text-gray-900">{variant}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Preview Text</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm text-gray-900">{config.previewText}</p>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Template ID</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm font-mono text-gray-900">{config.templateId}</p>
        </div>
      </div>

      {config.generatedBy && config.generatedBy.length > 0 && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Generated By</label>
          <div className="flex flex-wrap gap-2">
            {config.generatedBy.map((agent, index) => (
              <span key={index} className="inline-flex items-center space-x-1 px-2 py-1 bg-purple-100 text-purple-700 text-xs font-medium rounded-md">
                <Sparkles size={10} />
                <span>{agent}</span>
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  const renderSMSConfig = (config: SMSConfig) => (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Message Content</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm text-gray-900 whitespace-pre-wrap">{config.content}</p>
        </div>
      </div>

      {config.generatedBy && config.generatedBy.length > 0 && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Generated By</label>
          <div className="flex flex-wrap gap-2">
            {config.generatedBy.map((agent, index) => (
              <span key={index} className="inline-flex items-center space-x-1 px-2 py-1 bg-purple-100 text-purple-700 text-xs font-medium rounded-md">
                <Sparkles size={10} />
                <span>{agent}</span>
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  const renderWaitConfig = (config: WaitConfig) => (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Duration</label>
          <div className="bg-gray-50 rounded-md p-3 border">
            <p className="text-sm text-gray-900">{config.duration}</p>
          </div>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Unit</label>
          <div className="bg-gray-50 rounded-md p-3 border">
            <p className="text-sm text-gray-900 capitalize">{config.unit}</p>
          </div>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Wait Type</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm text-gray-900 capitalize">{config.type}</p>
        </div>
      </div>
    </div>
  );

  const renderDecisionConfig = (config: DecisionConfig) => (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Decision Criteria</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm text-gray-900">{config.criteria}</p>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Branches</label>
        <div className="space-y-2">
          {config.branches.map((branch, index) => (
            <div key={index} className="bg-yellow-50 rounded-md p-3 border border-yellow-200">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-900">{branch.condition}</span>
                <span className="text-xs text-gray-600">â†’ {branch.nextNodeId}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderEntryConfig = (config: EntryConfig) => (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Segment Name</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm text-gray-900">{config.segmentName}</p>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Audience Size</label>
        <div className="bg-gray-50 rounded-md p-3 border">
          <p className="text-sm text-gray-900">{config.audienceSize.toLocaleString()} contacts</p>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Entry Conditions</label>
        <div className="space-y-2">
          {config.entryConditions.map((condition, index) => (
            <div key={index} className="bg-green-50 rounded-md p-3 border border-green-200">
              <div className="flex items-center space-x-2">
                <Check size={14} className="text-green-600" />
                <p className="text-sm text-gray-900">{condition}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderConfiguration = () => {
    if (!node.config) return null;

    switch (node.type) {
      case 'entry':
        return renderEntryConfig(node.config as EntryConfig);
      case 'email':
        return renderEmailConfig(node.config as EmailConfig);
      case 'sms':
        return renderSMSConfig(node.config as SMSConfig);
      case 'wait':
        return renderWaitConfig(node.config as WaitConfig);
      case 'decision':
        return renderDecisionConfig(node.config as DecisionConfig);
      default:
        return null;
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className="fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 shadow-lg"
          initial={{ y: '100%' }}
          animate={{ y: 0 }}
          exit={{ y: '100%' }}
          transition={{ duration: 0.3, ease: 'easeOut' }}
        >
          <div className="flex flex-col max-h-[60vh]">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-200">
              <div className="flex items-center space-x-3">
                <div className="flex items-center space-x-2">
                  <IconComponent size={20} className="text-gray-600" />
                  <h2 className="text-lg font-semibold text-gray-900">{node.label}</h2>
                </div>

                {/* Badges */}
                <div className="flex items-center space-x-2">
                  {node.hasABTest && (
                    <span className="inline-flex items-center space-x-1 px-2 py-1 bg-orange-100 text-orange-700 text-xs font-medium rounded-md">
                      <TestTube size={10} />
                      <span>A/B Test</span>
                    </span>
                  )}

                  {node.generatedByAI && (
                    <span className="inline-flex items-center space-x-1 px-2 py-1 bg-purple-100 text-purple-700 text-xs font-medium rounded-md">
                      <Sparkles size={10} />
                      <span>AI Generated</span>
                    </span>
                  )}

                  <span className={`inline-flex items-center space-x-1 px-2 py-1 text-xs font-medium rounded-md ${
                    node.status === 'configured'
                      ? 'bg-green-100 text-green-700'
                      : node.status === 'pending'
                      ? 'bg-orange-100 text-orange-700'
                      : 'bg-gray-100 text-gray-700'
                  }`}>
                    {node.status === 'configured' ? (
                      <Check size={10} />
                    ) : (
                      <AlertCircle size={10} />
                    )}
                    <span className="capitalize">{node.status}</span>
                  </span>
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <motion.button
                  onClick={onEdit}
                  className="flex items-center space-x-2 px-3 py-1.5 text-sm font-medium text-blue-700 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Edit size={14} />
                  <span>Edit Step</span>
                </motion.button>

                <motion.button
                  onClick={onClose}
                  className="p-1.5 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100 transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <X size={16} />
                </motion.button>
              </div>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-4">
              {renderConfiguration()}
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}